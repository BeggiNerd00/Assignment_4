




List<int> calculate_sum = [13,56,77,3,45,6,944,1,43,7,40,55,67,93,45,754,33];

Not done:

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Done:

1. Write a program to find the sum of all elements of the Listusing a loop.


2. Using the list above, write a program that prints out only the numbers that are largeror equal to 20, and smaller or equal to 80. Finally print out how many numbers metthe condition.

3. Write a program that asks the user for a number (stdin.readLineSync()), over andover again, forever, until he stops giving a number (just presses enter). Store everynumber in a List. At the end of the program, print out the largest and the smallestvalue the user entered.

4. Write a program that asks the user for a string (stdin.readLineSync()), over and overagain, forever, until he stops giving a string (just presses enter). Store every entry in aList. At the end of the program, print out the contents of the list in a reversed order.



> Larger then
< Less then

== Equals

>= Larger or equal
<= Less or equal

!= Does not equal
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool getYesNo(String prompt){
  List<String> myNumbers = [];
  bool input;
  while(input == null){
    String userInput = getString(prompt);
    myNumbers.add(userInput);
    if(userInput.toLowerCase() == 'yes'){
      input = true;
    } else if (userInput == ''){
      print('Exiting now...\nHere are your numbers sorted from largest values to smallest values: ');
      input = false;
    }
  }
  myNumbers.sort();
  print(myNumbers);


  //return answer;
}

String getString(String prompt) {
  print(prompt);
  return stdin.readLineSync();
}

void main(>) {
  bool output = getYesNo('Please add a number: ');
}


int findMin(List<int> numbers) {
  return numbers.reduce(min);
}
int findMax(List<int> numbers) {
  return numbers.reduce(max);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[NOTES FRÁ KENNARA]
[8:12 PM] Hjörtur Pálmi Pálsson
Ok hvað ef þú prófar aðra nálgun

[8:12 PM] Hjörtur Pálmi Pálsson
Og þú aðlagar þína lausn að því

[8:12 PM] Hjörtur Pálmi Pálsson
Hvað ef þú grípur innputið frá stdin.readLineSync() sem streng, ekki parsa það strax í tölu
Og athugar - EF strengurinn er tómur, þá hættir þú lykkjunni, ANNARS breytir þú honum í tölu og addar honum í tölulista

[8:15 PM] Hjörtur Pálmi Pálsson


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Þannig þú getur stofnað tóma strengjabreytu fyrir ofan lykkjuna t.d.
String userInput

og svo keyrir lykkjan svo lengi sem userinput er ekki == ""

while(userInput != "")

og svo inn í lykkjunni þá lest þú inní þá breytu

userInput = stdin.readLineSync();

og athugar hvort hann inniheldur eitthvað
if(userInput != "")
Þá parsaru userInput í tölu og addar í lista



þá gæti þú gert

do {
int number = int.tryparse(stdin.readLineSync());

if (number != null){
adda tölunni í listann
}

} while(number != null);




[DO-WHILE]
[8:23 PM] Hjörtur Pálmi Pálsson
Bara venjuleg while lykkja, nema skilyrðið er athugað eftirá, í staðinn í upphafi

[8:23 PM] Hjörtur Pálmi Pálsson
Þannig þú guaranteear a.m.k. eina lykkju

Eina ítrun ef ég á að vera bókstaflegur :)





